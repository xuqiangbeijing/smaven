<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
    http://www.springframework.org/schema/context   
    http://www.springframework.org/schema/context/spring-context-3.0.xsd">
	<!-- 由于服务器启动时加载配置文件的顺序为
	  web.xml， root-context.xml(Spring 配置文件)， servlet-context.xml(SpringMVC配置文件),
	  root-context.xml文件中Controller会先进行扫描装配，但是此时service还没有进行事务增强处理，
	   得到的是原样的Service（没有经过实物加强处理，故而没有事务处理能力），所以我们必须在root-context.xml中不扫描Controller，配置如下 -->
	<context:component-scan base-package="com.business">
	   <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
	</context:component-scan>

	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:redis.properties</value>
			</list>
		</property>
	</bean>

	<!-- 配置数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource">
		<property name="driverClassName" value="${jdbc.DriverClassName}"/>
        <property name="url" value="${jdbc.url}"/>   
        <property name="username" value="${jdbc.username}"/>  
        <property name="password" value="${jdbc.password}"/>
        <property name="maxActive"><value>40</value></property>
		 <property name="maxIdle"><value>30</value></property>
		 <property name="maxWait"><value>10000</value></property>
		 <property name="removeAbandoned"><value>true</value></property><!-- 自动回收超时连接 -->
		 <property name="removeAbandonedTimeout"><value>300</value></property><!-- 超时连接时间 -->
		 <property name="testOnBorrow"><value>false</value></property><!-- 测试连接是否可用 --> 
		 <property name="testOnReturn"><value>false</value></property><!-- 测试连接是否可用 -->
		 <property name="testWhileIdle"><value>true</value></property><!-- 测试连接是否可用 -->
		 <property name="minEvictableIdleTimeMillis"><value>60000</value></property><!--  -->
		 <!-- 大于0时，每过timeBetweenEvictionRunsMillis 时间，就会启动一个线程，校验连接池中闲置时间超过minEvictableIdleTimeMillis的连接对象 -->
		 <property name="timeBetweenEvictionRunsMillis"><value>300000</value></property>
		 <property name="defaultAutoCommit"><value>true</value></property>
    </bean> 
	
	
	<!-- SqlMapClient对象的配置 -->
	<bean id="sqlMapClient" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
		<property name="configLocation" value="classpath:sqlMapConfig.xml"/>
		<property name="dataSource" ref="dataSource"></property>
	</bean> 
	 <!-- Spring iBatisTemplate -->
	 <bean id="sqlMapClientTemplate" class="org.springframework.orm.ibatis.SqlMapClientTemplate">
	       <property name="sqlMapClient">
	           <ref bean="sqlMapClient"/>
	       </property>
	 </bean>
	 
	 <!-- 配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource" />
    </bean>
	 
    <tx:advice id="transactionAdvice" transaction-manager="transactionManager">
       <tx:attributes>
           <!-- REQUIRED 表示当前方法必须在一个具有事务的上下文中运行，如有客户端有事务在进行，那么被调用端将在该事务中运行，否则的话重新开启一个事务。 -->
           <tx:method name="add*" propagation="REQUIRED" />
           <tx:method name="update*" propagation="REQUIRED" />
           <tx:method name="delete*" propagation="REQUIRED" />

           <!--  SUPPORTS 表示当前方法不必需要具有一个事务上下文，但是如果有一个事务的话，它也可以在这个事务中运行 -->
           <tx:method name="get*" propagation="SUPPORTS" />
           <tx:method name="find*" propagation="SUPPORTS" />
           <tx:method name="search*" propagation="SUPPORTS" />

           <tx:method name="*" rollback-for="Exception" />
       </tx:attributes>
    </tx:advice>
    <aop:config proxy-target-class="true"> <!-- proxy-target-class="true" 强制使用CGLIB代理  因为service中的类没有用实现接口的方式-->
        <aop:pointcut id="transactionPointcut" expression="execution(* com.business.service..*(..))" />
        <aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />
    </aop:config>
    
    
    
    <bean id="shardedJedisPool" class="redis.clients.jedis.ShardedJedisPool">
        <constructor-arg index="0" ref="jedisPoolConfig"/>
        <constructor-arg index="1">
            <list>
                 <!-- <bean name="slaver" class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis.slaver.host}"/>
                    <constructor-arg index="1" value="${redis.slaver.port}" type="int"/>
                </bean> -->
                 <bean name="master" class="redis.clients.jedis.JedisShardInfo">
                    <constructor-arg index="0" value="${redis.masterip}"/>
                    <constructor-arg index="1" value="${redis.port}" type="int"/>
                </bean>
            </list>
        </constructor-arg>
    </bean>

    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <!--  maxTotal 最大连接数 -->
        <property name="maxTotal" value="2048" />
        <property name="maxIdle" value="200" />
        <property name="numTestsPerEvictionRun" value="1024"/>
        <!-- timeBetweenEvictionRunsMillis 逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000" />
        <property name="minEvictableIdleTimeMillis" value="-1" />
        <property name="softMinEvictableIdleTimeMillis" value="10000" />
        <property name="maxWaitMillis" value="1500"/>
        <!-- testOnBorrow在获取连接的时候检查有效性, 默认false -->
        <property name="testOnBorrow" value="true" />
        <!-- testWhileIdle 在空闲时检查有效性, 默认false -->
        <property name="testWhileIdle" value="true"/>
        <property name="testOnReturn" value="false"/>
        <property name="jmxEnabled" value="true"/>
        <property name="jmxNamePrefix" value="pool"/>
        <property name="blockWhenExhausted" value="false"/>
    </bean>
</beans>